{
	"info": {
		"_postman_id": "4612cdf3-4f25-4243-96a5-62abc6e874be",
		"name": "Work_with_Postman2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"token\",jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "iceiceice21",
							"type": "text"
						},
						{
							"key": "password",
							"value": "1234",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () \r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"var jsnDat=pm.response.json();\r",
							"var schema =\r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"};\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsnDat,schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"  salary = pm.environment.get(\"salary\");\r",
							"  qa_salary_after_6_months = Number (jsnDat.qa_salary_after_6_months);\r",
							"  qa_salary_after_12_months=Number (jsnDat.qa_salary_after_12_months);\r",
							"  u_salary_1_5_year = Number (jsnDat.person.u_salary_1_5_year);\r",
							" \r",
							"\r",
							"   pm.test(\"correct values\", function () {\r",
							"    pm.expect(qa_salary_after_6_months).to.eql(salary*2);\r",
							"    pm.expect(qa_salary_after_12_months).to.eql(salary*2.9);\r",
							"    pm.expect(u_salary_1_5_year).to.eql(salary*4);\r",
							"  });\r",
							"   \r",
							"   postman.setEnvironmentVariable(\"salary_for_get_test_user\",u_salary_1_5_year);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\" :  {{age}},\r\n    \"salary\" : {{salary}},\r\n    \"name\" : {{name}},\r\n    \"auth_token\" : \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsnDat=pm.response.json();\r",
							"var schema =\r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsnDat,schema)).to.be.true;\r",
							"});\r",
							"\r",
							" salary =jsnDat.salary[0];\r",
							" salary2 = Number (jsnDat.salary[1]);\r",
							" salary3 = Number (jsnDat.salary[2]);\r",
							"\r",
							" pm.test(\"correct values\", function () {\r",
							"    pm.expect(salary2).to.eql(salary*2);\r",
							"    pm.expect(salary3).to.eql(salary*3);\r",
							"  });\r",
							"\r",
							"  pm.test(\"2 el salary > 1 and 3\", function (){\r",
							"if ((salary3>salary2)&(salary3>salary))\r",
							"{\r",
							"     pm.expect(true).to.eql(true);\r",
							"\r",
							"}\r",
							"else\r",
							"{\r",
							"     pm.expect(true).to.eql(false);\r",
							"}\r",
							"  });\r",
							" \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsnDat=pm.response.json();\r",
							"var schema =\r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsnDat,schema)).to.be.true;\r",
							"});\r",
							"\r",
							"weight = Number (pm.environment.get(\"weight\"));\r",
							"daily_food = Number (jsnDat.daily_food);\r",
							"daily_sleep = Number (jsnDat.daily_sleep);\r",
							"\r",
							"pm.test(\"correct values\", function () {\r",
							"    pm.expect(daily_food).to.eql(weight* 0.012);\r",
							"    pm.expect(daily_sleep).to.eql(weight*2.5);\r",
							"  });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "{{weight}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsnDat=pm.response.json();\r",
							"var schema=\r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsnDat,schema)).to.be.true;\r",
							"});\r",
							"\r",
							"name = pm.environment.get(\"name\");\r",
							"name_req = jsnDat.name;\r",
							"\r",
							"\r",
							"pm.test(\"correct values name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(name_req).to.eql(name);\r",
							"     });\r",
							"\r",
							"age = pm.environment.get(\"age\");\r",
							"console.log(age);\r",
							"age_req = jsnDat.age;\r",
							"console.log(age_req);\r",
							"\r",
							"pm.test(\"correct values age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(age_req).to.eql(age);\r",
							"     });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary_for_get_test_user}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"let list = JSON.parse(responseBody);\r",
							"let random_num = _.random(list.length);\r",
							"let randomId= list[random_num].Cur_ID;\r",
							"postman.setEnvironmentVariable(\"Cur_ID\", randomId);\r",
							"let num = list.length;\r",
							"postman.setEnvironmentVariable(\"num\",num);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "task_with_star",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"num = pm.environment.get(\"num\");\r",
							"let list = JSON.parse(responseBody);\r",
							"for (let i=0;i<num;i++){\r",
							"postman.setEnvironmentVariable(\"g\", i);\r",
							"let randomId= list[pm.environment.get(\"g\")].Cur_ID;\r",
							"postman.setEnvironmentVariable(\"s\", randomId);\r",
							"\r",
							"\r",
							"const options = {\r",
							"method: 'POST',\r",
							"url: 'http://162.55.220.72:5005/curr_byn',\r",
							"body: {\r",
							"mode: 'formdata',\r",
							"formdata: [\r",
							"{key:'auth_token', value:'/s34lfgbj/iceiceice21/jjd909/88521kjkWpqc27411234207555evny'},\r",
							"{key:'curr_code', value:pm.environment.get(\"s\")}\r",
							"]\r",
							"}\r",
							"}\r",
							"pm.sendRequest(options, (error, response) => {\r",
							"\r",
							"if((response.code == 200)&(response.json().hasOwnProperty(\"Cur_OfficialRate\"))){\r",
							"console.info(response.json());}});\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"byyy\");\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"by\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}curr_byn",
					"host": [
						"{{url}}curr_byn"
					]
				}
			},
			"response": []
		}
	]
}